// <auto-generated />
using System.Collections.Generic;
using JTA.Journal.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JTA.Infrastructure.Migrations
{
    [DbContext(typeof(TradingJournalDataContext))]
    partial class TradingJournalDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CostRelevance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRelevantForOverview")
                        .HasColumnType("boolean");

                    b.Property<int>("PriceRelevance")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TradeCompositeFK")
                        .HasColumnType("integer");

                    b.Property<int>("TradeElementFK")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TradeCompositeFK");

                    b.HasIndex("TradeElementFK");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeComposite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Sectors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("SummaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SummaryId");

                    b.ToTable("TradeComposites");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TradeActionType")
                        .HasColumnType("integer");

                    b.Property<int>("TradeCompositeFK")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TradeCompositeFK");

                    b.ToTable("TradeElements");
                });

            modelBuilder.Entity("DayJTrading.Journal.Data.JournalData", b =>
                {
                    b.PrimitiveCollection<List<string>>("SavedBrokers")
                        .HasColumnType("jsonb");

                    b.PrimitiveCollection<List<string>>("SavedSectors")
                        .HasColumnType("jsonb");

                    b.ToTable("JournalData");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.Cell", b =>
                {
                    b.HasOne("DayJT.Journal.DataEntities.Entities.TradeComposite", "TradeCompositeRef")
                        .WithMany()
                        .HasForeignKey("TradeCompositeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DayJT.Journal.DataEntities.Entities.TradeElement", "TradeElementRef")
                        .WithMany("Entries")
                        .HasForeignKey("TradeElementFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DayJT.Journal.DataEntities.Entities.ContentRecord", "ContentWrapper", b1 =>
                        {
                            b1.Property<int>("CellRefId")
                                .HasColumnType("integer");

                            b1.Property<string>("ChangeNote")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CellRefId");

                            b1.ToTable("Entries");

                            b1.WithOwner("CellRef")
                                .HasForeignKey("CellRefId");

                            b1.Navigation("CellRef");
                        });

                    b.OwnsMany("DayJT.Journal.DataEntities.Entities.ContentRecord", "History", b1 =>
                        {
                            b1.Property<int>("CellRefId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ChangeNote")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CellRefId", "Id");

                            b1.ToTable("Entries_History");

                            b1.WithOwner("CellRef")
                                .HasForeignKey("CellRefId");

                            b1.Navigation("CellRef");
                        });

                    b.Navigation("ContentWrapper")
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("TradeCompositeRef");

                    b.Navigation("TradeElementRef");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeComposite", b =>
                {
                    b.HasOne("DayJT.Journal.DataEntities.Entities.TradeElement", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeElement", b =>
                {
                    b.HasOne("DayJT.Journal.DataEntities.Entities.TradeComposite", "TradeCompositeRef")
                        .WithMany("TradeElements")
                        .HasForeignKey("TradeCompositeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeCompositeRef");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeComposite", b =>
                {
                    b.Navigation("TradeElements");
                });

            modelBuilder.Entity("DayJT.Journal.DataEntities.Entities.TradeElement", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
