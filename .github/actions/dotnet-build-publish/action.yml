name: 'Dotnet Build & Publish'
description: 'Builds .NET project and publishes Docker image with version.txt version check'

inputs:
  solution-path:
    description: 'Path to the solution folder (for dotnet build)'
    required: true
  project-path:
    description: 'Path to the folder containing the .csproj file to publish'
    required: true
  image-name:
    description: 'Docker image name to build and push'
    required: true
  github-token:
    description: 'GitHub Token for registry login and API calls'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Check if project folder changed
      id: check_changes
      shell: bash
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "${{ inputs.project-path }}"; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Fetch Git tags
      if: steps.check_changes.outputs.should_build == 'true'
      run: git fetch --tags --force

    - name: Build .NET solution
      if: steps.check_changes.outputs.should_build == 'true'
      uses: ./.github/actions/common-build-steps-dotnet
      with:
        solution-path: ${{ inputs.solution-path }}

    - name: Detect .csproj file in project folder
      if: steps.check_changes.outputs.should_build == 'true'
      id: detect_project
      shell: bash
      run: |
        PROJECT_FILE=$(find "${{ inputs.project-path }}" -maxdepth 1 -name '*.csproj' | head -n 1)
        if [ -z "$PROJECT_FILE" ]; then
          echo "❌ No .csproj file found in project path '${{ inputs.project-path }}'"
          exit 1
        fi
        echo "project-file=$PROJECT_FILE" >> $GITHUB_OUTPUT

    - name: Publish .NET project
      if: steps.check_changes.outputs.should_build == 'true'
      shell: bash
      run: dotnet publish -c Release -r linux-x64 -o ./publish ${{ steps.detect_project.outputs.project-file }}

    - name: Set up Docker Buildx
      if: steps.check_changes.outputs.should_build == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      if: steps.check_changes.outputs.should_build == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Set version from version.txt or fallback to timestamp
      if: steps.check_changes.outputs.should_build == 'true'
      id: set_version
      shell: bash
      run: |
        TIMESTAMP=$(TZ="Asia/Jerusalem" date --iso-8601=seconds)

        VERSION_FILE="${{ inputs.project-path }}/version.txt"

        if [ -f "$VERSION_FILE" ]; then
          VERSION_RAW=$(cat "$VERSION_FILE" | tr -d ' \t\n\r')
          if [ -z "$VERSION_RAW" ]; then
            echo "version.txt is empty, falling back to timestamp version"
            VERSION="v${TIMESTAMP}"
          else
            VERSION="$VERSION_RAW"
          fi
        else
          echo "version.txt not found, falling back to timestamp version"
          VERSION="v${TIMESTAMP}"
        fi

        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

        echo "Version: $VERSION"
        echo "Timestamp: $TIMESTAMP"

    - name: Build and push Docker image
      if: steps.check_changes.outputs.should_build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.project-path }}/Dockerfile
        push: true
        build-args: |
          VERSION=${{ env.VERSION }}
          COMMIT_SHA=${{ github.sha }}
        tags: |
          ghcr.io/shaunday/horizons-retrospective/${{ inputs.image-name }}:${{ env.VERSION }}
          ghcr.io/shaunday/horizons-retrospective/${{ inputs.image-name }}:latest
