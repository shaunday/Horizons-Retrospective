// <auto-generated />
using System;
using HsR.Journal.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HsR.Journal.Infrastructure.Migrations
{
    [DbContext(typeof(TradingJournalDataContext))]
    partial class TradingJournalDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HsR.Journal.Entities.DataElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompositeFK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRelevantForLocalOverview")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelevantForTradeOverview")
                        .HasColumnType("boolean");

                    b.Property<string>("Restrictions")
                        .HasColumnType("jsonb");

                    b.Property<bool>("SectorRelevance")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TotalCostRelevance")
                        .HasColumnType("text");

                    b.Property<int>("TradeElementFK")
                        .HasColumnType("integer");

                    b.Property<string>("UnitPriceRelevance")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompositeFK");

                    b.HasIndex("TradeElementFK");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("HsR.Journal.Entities.TradeElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompositeFK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TradeActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TradeElementType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("TradeElement");

                    b.HasDiscriminator<string>("TradeElementType").HasValue("TradeElement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HsR.Journal.Entities.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SavedSectors")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("TradeComposite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SummaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SummaryId")
                        .IsUnique();

                    b.ToTable("TradeComposites");
                });

            modelBuilder.Entity("HsR.Journal.Entities.InterimTradeElement", b =>
                {
                    b.HasBaseType("HsR.Journal.Entities.TradeElement");

                    b.HasIndex("CompositeFK");

                    b.HasDiscriminator().HasValue("Action");
                });

            modelBuilder.Entity("HsR.Journal.Entities.TradeJournal.TradeSummary", b =>
                {
                    b.HasBaseType("HsR.Journal.Entities.TradeElement");

                    b.Property<int>("CompositeRefId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInterim")
                        .HasColumnType("boolean");

                    b.HasIndex("CompositeRefId");

                    b.HasDiscriminator().HasValue("Summary");
                });

            modelBuilder.Entity("HsR.Journal.Entities.DataElement", b =>
                {
                    b.HasOne("TradeComposite", "CompositeRef")
                        .WithMany()
                        .HasForeignKey("CompositeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HsR.Journal.Entities.TradeElement", "TradeElementRef")
                        .WithMany("Entries")
                        .HasForeignKey("TradeElementFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HsR.Journal.Entities.ContentRecord", "ContentWrapper", b1 =>
                        {
                            b1.Property<int>("DataElementId")
                                .HasColumnType("integer");

                            b1.Property<string>("ChangeNote")
                                .HasColumnType("text");

                            b1.Property<string>("ContentValue")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("DataElementFK")
                                .HasColumnType("integer");

                            b1.HasKey("DataElementId");

                            b1.ToTable("Entries");

                            b1.WithOwner()
                                .HasForeignKey("DataElementId");
                        });

                    b.OwnsMany("HsR.Journal.Entities.ContentRecord", "History", b1 =>
                        {
                            b1.Property<int>("DataElementId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ChangeNote")
                                .HasColumnType("text");

                            b1.Property<string>("ContentValue")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("DataElementFK")
                                .HasColumnType("integer");

                            b1.HasKey("DataElementId", "Id");

                            b1.ToTable("Entries_History");

                            b1.WithOwner()
                                .HasForeignKey("DataElementId");
                        });

                    b.Navigation("CompositeRef");

                    b.Navigation("ContentWrapper");

                    b.Navigation("History");

                    b.Navigation("TradeElementRef");
                });

            modelBuilder.Entity("TradeComposite", b =>
                {
                    b.HasOne("HsR.Journal.Entities.TradeJournal.TradeSummary", "Summary")
                        .WithOne()
                        .HasForeignKey("TradeComposite", "SummaryId");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("HsR.Journal.Entities.InterimTradeElement", b =>
                {
                    b.HasOne("TradeComposite", "CompositeRef")
                        .WithMany("TradeElements")
                        .HasForeignKey("CompositeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompositeRef");
                });

            modelBuilder.Entity("HsR.Journal.Entities.TradeJournal.TradeSummary", b =>
                {
                    b.HasOne("TradeComposite", "CompositeRef")
                        .WithMany()
                        .HasForeignKey("CompositeRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompositeRef");
                });

            modelBuilder.Entity("HsR.Journal.Entities.TradeElement", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("TradeComposite", b =>
                {
                    b.Navigation("TradeElements");
                });
#pragma warning restore 612, 618
        }
    }
}
