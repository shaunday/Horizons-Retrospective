events {}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name api.mywebthings.xyz;

        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name api.mywebthings.xyz;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/api.mywebthings.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.mywebthings.xyz/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;

        # Allow CORS preflight
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://mywebthings.xyz' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                return 204;
            }

            proxy_pass         http://web:80;  # Proxy to the web container
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            # Optional: allow actual requests to respond with CORS headers too
            add_header 'Access-Control-Allow-Origin' '*' always;
        }
    }
}
